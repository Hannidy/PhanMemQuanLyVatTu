package form;

import dao.NhaCungCapDAO;
import entity.model_NhaCungCap;
import entity.model_VatTu;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import tabbed.TabbedForm;
import raven.toast.Notifications;
import util.Message;

public class NhaCungCap_Form extends TabbedForm {

    private DefaultTableModel tbl_ModelNhaCungCap;
    private NhaCungCapDAO nccdao = new NhaCungCapDAO();
    private List<model_NhaCungCap> list_NhaCungCap = new ArrayList<model_NhaCungCap>();

    private String selectedtenNCC = "";
    private String selectedSDT = "";
    private String selectedemail = "";
    private String selecteddiachi = "";

    private static final String LOG_FILE = "nhacungcap_log.txt";
    // Danh s√°ch l∆∞u tr·ªØ th√¥ng b√°o
    private List<String> actionLogs = new ArrayList<>();
    // Bi·∫øn ƒë·∫øm s·ªë l∆∞·ª£ng th√¥ng b√°o
    private int notificationCount = 0;
    private static final long TWENTY_FOUR_HOURS = 24 * 60 * 60 * 1000; // 24 ti·∫øng t√≠nh b·∫±ng milliseconds

    public NhaCungCap_Form() {
        initComponents();
        initcomboBox();
        addSearchFilter();
        addSearchButtonAction();
        tbl_ModelNhaCungCap = (DefaultTableModel) tbl_nhacungCap.getModel();
        fillToTableNhaCungCap();
        addBellButtonActionNCC();
    }

    public void initcomboBox() {
        cbo_timKiem.addItem("M√£ nh√† cung c·∫•p");
        cbo_timKiem.addItem("T√™n nh√† cung c·∫•p");
        cbo_timKiem.addItem("S·ªë ƒëi·ªán tho·∫°i");
        cbo_timKiem.addItem("Email");
        cbo_timKiem.addItem("ƒê·ªãa ch·ªâ");
    }

    public void fillToTableNhaCungCap() {
        try {
            // X√≥a to√†n b·ªô d·ªØ li·ªáu c≈© tr∆∞·ªõc khi th√™m m·ªõi
            tbl_ModelNhaCungCap.setRowCount(0);

            // L·∫•y danh s√°ch nh√† cung c·∫•p t·ª´ database
            List<model_NhaCungCap> list_NhaCungCap = nccdao.selectAll();
            if (list_NhaCungCap != null) {
                for (model_NhaCungCap ncc : list_NhaCungCap) {
                    tbl_ModelNhaCungCap.addRow(new Object[]{
                        ncc.getManhacungCap(),
                        ncc.getTennhacungCap(),
                        ncc.getSodienThoai(),
                        ncc.getEmail(),
                        ncc.getDiaChi()
                    });
                }
            }
        } catch (Exception e) {
            // In l·ªói ra console ƒë·ªÉ d·ªÖ debug
            //showNotification("L·ªói truy v·∫•n d·ªØ li·ªáu: ", true);

        }
    }

    public void deleteNhaCungCap() {
        int rows = tbl_nhacungCap.getSelectedRow();
        int[] selectedRows = tbl_nhacungCap.getSelectedRows(); // L·∫•y t·∫•t c·∫£ c√°c d√≤ng ƒë∆∞·ª£c ch·ªçn

        if (selectedRows.length == 0) {
            Notifications.getInstance().show(Notifications.Type.INFO, "Ch·ªçn √≠t nh·∫•t m·ªôt d√≤ng ƒë·ªÉ x√≥a!");
            return;
        }

        String maNCC = tbl_nhacungCap.getValueAt(rows, 0).toString();
        String tenNCC = tbl_nhacungCap.getValueAt(rows, 1).toString().trim();
        String SDT = tbl_nhacungCap.getValueAt(rows, 2).toString().trim();
        String email = tbl_nhacungCap.getValueAt(rows, 3).toString().trim();
        String diaChi = tbl_nhacungCap.getValueAt(rows, 4).toString().trim();

        boolean confirm = Message.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a " + selectedRows.length + " nh√† cung c·∫•p?");
        if (!confirm) {
            return;
        }

        try {
            List<String> danhSachXoa = new ArrayList<>(); // L∆∞u c√°c v·∫≠t t∆∞ b·ªã x√≥a ƒë·ªÉ ghi v√†o th√¥ng b√°o

            for (int i = selectedRows.length - 1; i >= 0; i--) { // X√≥a t·ª´ d∆∞·ªõi l√™n ƒë·ªÉ tr√°nh l·ªói ch·ªâ s·ªë
                int row = selectedRows[i];
                //String maNCCtodelete = tbl_nhacungCap.getValueAt(row, 0).toString();
                nccdao.delete(maNCC); // X√≥a t·ª´ng v·∫≠t t∆∞
                danhSachXoa.add(maNCC); // Th√™m v√†o danh s√°ch ƒë·ªÉ ghi nh·∫≠n th√¥ng b√°o
            }

            fillToTableNhaCungCap(); // C·∫≠p nh·∫≠t l·∫°i b·∫£ng sau khi x√≥a
            Notifications.getInstance().show(Notifications.Type.SUCCESS, "ƒê√£ x√≥a " + selectedRows.length + " nh√† cung c·∫•p!");

            String log = String.format("X√≥a|%s|%s|%s|%s|%s|%s",
                    maNCC, tenNCC, SDT, email, diaChi,
                    new SimpleDateFormat("HH:mm:ss dd/MM/yyyy").format(new Date()));
            writeLogToFile(log);
            notificationCount++; // TƒÉng s·ªë th√¥ng b√°o
            updateBellIcon(); // C·∫≠p nh·∫≠t giao di·ªán chu√¥ng

        } catch (Exception e) {
            Notifications.getInstance().show(Notifications.Type.INFO, "Kh√¥ng th·ªÉ x√≥a nh√† cung c·∫•p!");
        }
    }

    public void updateNhaCungCap() {
        int row = tbl_nhacungCap.getSelectedRow();
        if (row < 0) {
            Notifications.getInstance().show(Notifications.Type.INFO, "Ch·ªçn m·ªôt d√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t!");
            return;
        }

        // L·∫•y d·ªØ li·ªáu t·ª´ JTable ch·ªâ v·ªõi 3 c·ªôt
        String maNCC = tbl_nhacungCap.getValueAt(row, 0).toString();
        String tenNCC = tbl_nhacungCap.getValueAt(row, 1).toString().trim();
        String SDT = tbl_nhacungCap.getValueAt(row, 2).toString().trim();
        String email = tbl_nhacungCap.getValueAt(row, 3).toString().trim();
        String diaChi = tbl_nhacungCap.getValueAt(row, 4).toString().trim();

        // Ki·ªÉm tra n·∫øu c√≥ √¥ n√†o b·ªã b·ªè tr·ªëng
        if (tenNCC.isEmpty() || maNCC.isEmpty() || SDT.isEmpty() || email.isEmpty() || diaChi.isEmpty()) {
            Notifications.getInstance().show(Notifications.Type.INFO, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }

        // T·∫°o ƒë·ªëi t∆∞·ª£ng V·∫≠t T∆∞ m·ªõi
        model_NhaCungCap ncc = new model_NhaCungCap();
        ncc.setManhacungCap(maNCC);
        ncc.setTennhacungCap(tenNCC);
        ncc.setSodienThoai(SDT);
        ncc.setEmail(email);
        ncc.setDiaChi(diaChi);

        // X√°c nh·∫≠n c·∫≠p nh·∫≠t
        boolean confirm = Message.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t nh√† cung c·∫•p c√≥ m√£ '" + maNCC + "'?");
        if (confirm) {
            try {
                nccdao.update(ncc); // C·∫≠p nh·∫≠t v√†o CSDL
                fillToTableNhaCungCap(); // C·∫≠p nh·∫≠t l·∫°i b·∫£ng ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi
                Notifications.getInstance().show(Notifications.Type.SUCCESS, "C·∫≠p nh·∫≠t nh√† cung c·∫•p th√†nh c√¥ng!");

                // üîî Ghi log v√†o file
                String log = String.format("C·∫≠p nh·∫≠t|%s|%s|%s|%s|%s|%s",
                        maNCC, tenNCC, SDT, email, diaChi,
                        new SimpleDateFormat("HH:mm:ss dd/MM/yyyy").format(new Date()));
                writeLogToFile(log);
                notificationCount++; // TƒÉng s·ªë th√¥ng b√°o
                updateBellIcon(); // C·∫≠p nh·∫≠t giao di·ªán chu√¥ng

            } catch (Exception e) {
                Message.error("L·ªói: " + e.getMessage());
                Notifications.getInstance().show(Notifications.Type.INFO, "C·∫≠p nh·∫≠t nh√† cung c·∫•p th·∫•t b·∫°i!");
            }
        }
    }

    private void addBellButtonActionNCC() {
        for (ActionListener al : btn_bell.getActionListeners()) {
            btn_bell.removeActionListener(al);
        }

        btn_bell.addActionListener(e -> {
            JDialog dialog = new JDialog(SwingUtilities.getWindowAncestor(btn_bell), "L·ªãch s·ª≠ h√†nh ƒë·ªông");
            dialog.setSize(600, 400);
            dialog.setLocationRelativeTo(null);
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

            String[] columns = {"H√†nh ƒë·ªông", "M√£ nh√† cung c·∫•p", "T√™n nh√† cung c·∫•p", "S·ªë ƒëi·ªán tho·∫°i", "Email", "ƒê·ªãa ch·ªâ", "Th·ªùi gian"};
            DefaultTableModel model = new DefaultTableModel(columns, 0);
            JTable logTable = new JTable(model);
            JScrollPane scrollPane = new JScrollPane(logTable);
            dialog.add(scrollPane);

            List<String> logs = readLogsFromFile(); // ƒê·ªçc v√† t·ª± ƒë·ªông x√≥a log c≈©
            if (logs.isEmpty()) {
                Notifications.getInstance().show(Notifications.Type.INFO, "Ch∆∞a c√≥ h√†nh ƒë·ªông n√†o!");
                dialog.dispose();
                return;
            }

            for (String log : logs) {
                String[] parts = log.split("\\|");
                if (parts.length == 7) {
                    model.addRow(new Object[]{
                        parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]
                    });
                }
            }

            // C·∫≠p nh·∫≠t notificationCount d·ª±a tr√™n s·ªë d√≤ng log c√≤n l·∫°i
            notificationCount = logs.size();
            updateBellIcon();

            dialog.setVisible(true);
        });
    }

    private List<String> readLogsFromFile() {
        List<String> logs = new ArrayList<>();
        List<String> logsToKeep = new ArrayList<>();
        SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");
        Date currentTime = new Date();

        // ƒê·ªçc file log
        try (BufferedReader reader = new BufferedReader(new FileReader(LOG_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.trim().isEmpty()) {
                    logs.add(line);
                }
            }
        } catch (FileNotFoundException e) {
            // File ch∆∞a t·ªìn t·∫°i
        } catch (IOException e) {
            Notifications.getInstance().show(Notifications.Type.ERROR, "L·ªói khi ƒë·ªçc log: " + e.getMessage());
        }

        // L·ªçc c√°c log c≈© h∆°n 24 ti·∫øng
        for (String log : logs) {
            String[] parts = log.split("\\|");
            if (parts.length == 7) {
                try {
                    Date logTime = dateFormat.parse(parts[6]); // Parse th·ªùi gian t·ª´ log
                    long timeDiff = currentTime.getTime() - logTime.getTime();
                    if (timeDiff <= TWENTY_FOUR_HOURS) {
                        logsToKeep.add(log); // Gi·ªØ l·∫°i log n·∫øu ch∆∞a qu√° 24 ti·∫øng
                    }
                } catch (Exception e) {
                    // N·∫øu parse th·ªùi gian l·ªói, b·ªè qua d√≤ng n√†y
                    System.err.println("L·ªói parse th·ªùi gian log: " + log);
                }
            }
        }

        // Ghi l·∫°i file log v·ªõi c√°c d√≤ng c√≤n l·∫°i
        if (logs.size() != logsToKeep.size()) { // Ch·ªâ ghi n·∫øu c√≥ d√≤ng b·ªã x√≥a
            writeLogsToFile(logsToKeep);
        }

        return logsToKeep;
    }

    private void writeLogsToFile(List<String> logs) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(LOG_FILE))) {
            for (String log : logs) {
                writer.write(log);
                writer.newLine();
            }
        } catch (IOException e) {
            Notifications.getInstance().show(Notifications.Type.ERROR, "L·ªói khi ghi log: " + e.getMessage());
        }
    }

    private void writeLogToFile(String log) {
        // Ghi log m·ªõi v√† ki·ªÉm tra x√≥a log c≈©
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(LOG_FILE, true))) {
            writer.write(log);
            writer.newLine();
        } catch (IOException e) {
            Notifications.getInstance().show(Notifications.Type.ERROR, "L·ªói khi ghi log: " + e.getMessage());
        }
        // Sau khi ghi log m·ªõi, ki·ªÉm tra v√† x√≥a log c≈©
        readLogsFromFile();
    }

    private void updateBellIcon() {
        if (notificationCount > 0) {
            btn_bell.setToolTipText("C√≥ " + notificationCount + " h√†nh ƒë·ªông");
        } else {
            btn_bell.setToolTipText("Kh√¥ng c√≥ h√†nh ƒë·ªông n√†o");
        }
    }

    public void addSearchFilter() {  // G·∫Øn m·ªôt listener (tr√¨nh theo d√µi) v√†o txt_timKiem
        txt_timKiem.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                autoSearch();
            }

            public void removeUpdate(DocumentEvent e) {
                autoSearch();
            }

            public void changedUpdate(DocumentEvent e) {
                autoSearch();
            }

            private void autoSearch() {  // T√¨m ki·∫øm theo combobox
                String selectedCriteria = (String) cbo_timKiem.getSelectedItem();
                String keyword = txt_timKiem.getText().trim();

                int columnIndex = -1;
                switch (selectedCriteria) {
                    case "M√£ nh√† cung c·∫•p":
                        columnIndex = 0;
                        break;
                    case "T√™n nh√† cung c·∫•p":
                        columnIndex = 1;
                        break;
                    case "S·ªë ƒëi·ªán tho·∫°i":
                        columnIndex = 2;
                        break;
                    case "Email":
                        columnIndex = 3;
                        break;
                    case "ƒê·ªãa ch·ªâ":
                        columnIndex = 4;
                        break;
                }

                if (keyword.isEmpty()) {
                    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) tbl_nhacungCap.getModel());
                    tbl_nhacungCap.setRowSorter(sorter);
                    sorter.setRowFilter(null);
                    return;
                }

                // ‚úÖ L·ªçc t·ª± ƒë·ªông (kh√¥ng gi·ªõi h·∫°n m√£ ph·∫£i theo ƒë·ªãnh d·∫°ng g√¨)
                TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) tbl_nhacungCap.getModel());
                tbl_nhacungCap.setRowSorter(sorter);
                sorter.setRowFilter(RowFilter.regexFilter("(?i)" + Pattern.quote(keyword), columnIndex));
            }
        });
    }

    public void searchFilter() {
        String keyword = txt_timKiem.getText().trim().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) tbl_nhacungCap.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tbl_nhacungCap.setRowSorter(sorter);

        sorter.setRowFilter(new RowFilter<DefaultTableModel, Integer>() {
            @Override
            public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                for (int i = 0; i < 3; i++) { // C·ªôt 0: M√£ v·∫≠t t∆∞, 1: T√™n, 2: M√£ lo·∫°i
                    String value = entry.getStringValue(i).toLowerCase();
                    if (value.contains(keyword)) {
                        return true;
                    }
                }
                return false;
            }
        });
    }

    private void addSearchButtonAction() {
        btn_timKiem.addActionListener(e -> {
            String selectedCriteria = (String) cbo_timKiem.getSelectedItem();
            String keyword = txt_timKiem.getText().trim();

            if (keyword.isEmpty()) {
                Notifications.getInstance().show(Notifications.Type.INFO, "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!");
                return;
            }

            int columnIndex;
            switch (selectedCriteria) {
                case "M√£ nh√† cung c·∫•p":
                    columnIndex = 0;
                    break;
                case "T√™n nh√† cung c·∫•p":
                    columnIndex = 1;
                    break;
                case "S·ªë ƒëi·ªán tho·∫°i":
                    columnIndex = 2;
                    break;
                case "Email":
                    columnIndex = 3;
                    break;
                case "ƒê·ªãa ch·ªâ":
                    columnIndex = 4;
                    break;
                default:
                    Notifications.getInstance().show(Notifications.Type.INFO, "Ti√™u ch√≠ t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá!");
                    return;
            }

            DefaultTableModel model = (DefaultTableModel) tbl_nhacungCap.getModel();
            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
            tbl_nhacungCap.setRowSorter(sorter);

            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + Pattern.quote(keyword), columnIndex));
        });
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btn_timKiem = new javax.swing.JButton();
        txt_timKiem = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_nhacungCap = new javax.swing.JTable();
        btn_them = new javax.swing.JButton();
        btn_xoa = new javax.swing.JButton();
        btn_sua = new javax.swing.JButton();
        cbo_timKiem = new javax.swing.JComboBox<>();
        btn_bell = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Nh√† Cung C·∫•p");

        btn_timKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawer/icon/search.png"))); // NOI18N

        tbl_nhacungCap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "M√£ Nh√† Cung C·∫•p", "T√™n Nh√† Cung C·∫•p", "S·ªë ƒêi·ªán Tho·∫°i", "Email", "ƒê·ªãa Ch·ªâ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_nhacungCap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_nhacungCapMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_nhacungCap);

        btn_them.setText("Th√™m");
        btn_them.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_themActionPerformed(evt);
            }
        });

        btn_xoa.setText("X√≥a");
        btn_xoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_xoaActionPerformed(evt);
            }
        });

        btn_sua.setText("S·ª≠a");
        btn_sua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_suaActionPerformed(evt);
            }
        });

        btn_bell.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawer/image/icon.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_bell))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_timKiem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbo_timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                        .addComponent(btn_them)
                        .addGap(18, 18, 18)
                        .addComponent(btn_xoa)
                        .addGap(18, 18, 18)
                        .addComponent(btn_sua)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(btn_bell))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_them)
                        .addComponent(btn_xoa)
                        .addComponent(btn_sua)
                        .addComponent(cbo_timKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbl_nhacungCapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_nhacungCapMouseClicked
        // TODO add your handling code here:
        int selectedRow = tbl_nhacungCap.getSelectedRow(); // L·∫•y d√≤ng ƒëang ch·ªçn

        if (selectedRow != -1) { // Ki·ªÉm tra c√≥ d√≤ng ƒë∆∞·ª£c ch·ªçn kh√¥ng
            String tenNCC = tbl_nhacungCap.getValueAt(selectedRow, 1).toString();
            String SDT = tbl_nhacungCap.getValueAt(selectedRow, 2).toString();
            String email = tbl_nhacungCap.getValueAt(selectedRow, 3).toString();
            String diachi = tbl_nhacungCap.getValueAt(selectedRow, 4).toString();

            // L∆∞u v√†o bi·∫øn to√†n c·ª•c ƒë·ªÉ truy·ªÅn v√†o JDialo
            selectedtenNCC = tenNCC;
            selectedSDT = SDT;
            selectedemail = email;
            selecteddiachi = diachi;
        }
    }//GEN-LAST:event_tbl_nhacungCapMouseClicked

    private void btn_themActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_themActionPerformed
        // TODO add your handling code here:
        DiaLog_NhaCungCap dialog = new DiaLog_NhaCungCap(null, true, this);
        dialog.setData(selectedtenNCC, selectedSDT, selectedemail, selecteddiachi);
        dialog.setVisible(true);
    }//GEN-LAST:event_btn_themActionPerformed

    private void btn_xoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_xoaActionPerformed
        // TODO add your handling code here:
        deleteNhaCungCap();
    }//GEN-LAST:event_btn_xoaActionPerformed

    private void btn_suaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_suaActionPerformed
        // TODO add your handling code here:
        updateNhaCungCap();
    }//GEN-LAST:event_btn_suaActionPerformed

    @Override
    public boolean formClose() {
        return true;

    }

    @Override
    public void formOpen() {
        System.out.println("Duy Dep Trai");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_bell;
    private javax.swing.JButton btn_sua;
    private javax.swing.JButton btn_them;
    private javax.swing.JButton btn_timKiem;
    private javax.swing.JButton btn_xoa;
    private javax.swing.JComboBox<String> cbo_timKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_nhacungCap;
    private javax.swing.JTextField txt_timKiem;
    // End of variables declaration//GEN-END:variables
}
